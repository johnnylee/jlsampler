#!/usr/bin/env python 
import os
import json
import Tkinter as tk
import tkFileDialog
import subprocess


class SimpleControl(object):
    def __init__(self, gui, parent, row, jlName, bind_enter=True):
        self.gui = gui
        label = tk.Label(parent, text=jlName + ":")
        label.grid(row=row, sticky=tk.W)

        self.ctrl = tk.Entry(parent)
        self.ctrl.grid(row=row, column=1, sticky=tk.EW)
        if bind_enter:
            self.ctrl.bind("<Return>", self.send_command)

        self.jlName = jlName
        
        
    def get_command(self):
        return self.jlName + "=" + str(self.ctrl.get()) + "\n"
    
    def get_value(self):
        return str(self.ctrl.get())
        
    def set_value(self, val):
        self.ctrl.delete(0, tk.END)
        self.ctrl.insert(0, str(val))
        
    def apply_defaults(self, defaults):
        if self.jlName in defaults:
            self.set_value(defaults[self.jlName])
            
    def send_command(self, *args, **kwargs):
        try:
            self.gui.proc.stdin.write(self.get_command())
        except Exception, ex:
            print("Failed to send command:", self.get_command())
            print(ex)
            
        
class GUI(object):
    def __init__(self, master):
        # Internal state. 
        self.proc = None

        self.master = master
        self.master.title("JLSampler")

        frame_kwargs = {"padx":4, "pady":4}
        
        # First box is for loading a sampler. 
        frame = tk.LabelFrame(self.master, text="Sampler", **frame_kwargs)
        frame.pack(fill=tk.X)
        frame.columnconfigure(1, weight=1)

        self._SamplerPath = SimpleControl(self, frame, 0, "Path", 
                                          bind_enter=False)
        
        btn_frame = tk.Frame(frame)
        btn_frame.grid(row=1, columnspan=2, sticky=tk.EW)
        btn = tk.Button(btn_frame, text="Browse", command=self.on_browse)
        btn.grid(row=0, sticky=tk.W)
        
        btn = tk.Button(btn_frame, text="Load",
                        command=self.on_load)
        btn.grid(row=0, column=1, sticky=tk.W)
        
        # Next box is basic controls. 
        frame = tk.LabelFrame(
            self.master, text="Controls", **frame_kwargs)
        frame.pack(fill=tk.X)
        frame.columnconfigure(1, weight=1)

        row = 0
        self._Transpose = SimpleControl(self, frame, row, "Transpose")
        row += 1
        self._PitchBendMax = SimpleControl(self, frame, row, "PitchBendMax")
        row += 1 
        self._Tau = SimpleControl(self, frame, row, "Tau")
        row += 1 
        self._TauCut = SimpleControl(self, frame, row, "TauCut")
        row += 1 
        self._TauFadeIn = SimpleControl(self, frame, row, "TauFadeIn")
        row += 1 
        self._CropThresh = SimpleControl(self, frame, row, "CropThresh")
        row += 1 
        self._RmsTime = SimpleControl(self, frame, row, "RmsTime")
        row += 1 
        self._RmsLow = SimpleControl(self, frame, row, "RmsLow")
        row += 1 
        self._RmsHigh = SimpleControl(self, frame, row, "RmsHigh")
        row += 1 
        self._PanLow = SimpleControl(self, frame, row, "PanLow")
        row += 1 
        self._PanHigh = SimpleControl(self, frame, row, "PanHigh")
        row += 1 
        self._GammaAmp = SimpleControl(self, frame, row, "GammaAmp")
        row += 1 
        self._GammaLayer = SimpleControl(self, frame, row, "GammaLayer")
        row += 1 
        self._VelMult = SimpleControl(self, frame, row, "VelMult")
        row += 1 
        self._MixLayers = SimpleControl(self, frame, row, "MixLayers")
        self.controls = [
            self._Transpose, self._PitchBendMax,
            self._Tau, self._TauCut, self._TauFadeIn, self._CropThresh,
            self._RmsTime, self._RmsLow, self._RmsHigh, self._PanLow, 
            self._PanHigh, self._GammaAmp, self._GammaLayer, self._VelMult, 
            self._MixLayers
            ]
        
        self.proc = subprocess.Popen(
            "jlsampler", shell=True, stdin=subprocess.PIPE)
        
    def on_browse(self, *args, **kwargs):
        sampler_path = tkFileDialog.askdirectory()
        if len(sampler_path) > 0:
            self._SamplerPath.set_value(sampler_path)
            self.on_load()

    def on_load(self, *args, **kwargs): 
        path = self._SamplerPath.get_value()
        self.load_default_control_vals()
        self.load_json_control_vals()
        self.send_command("Load=" + path)


    def load_default_control_vals(self):
        self._Transpose.set_value(0)
        self._PitchBendMax.set_value(1)
        self._Tau.set_value(0)
        self._TauCut.set_value(0)
        self._TauFadeIn.set_value(0)
        self._CropThresh.set_value(0)
        self._RmsTime.set_value(0.25)
        self._RmsLow.set_value(0.20)
        self._RmsHigh.set_value(0.04)
        self._PanLow.set_value(0)
        self._PanHigh.set_value(0)
        self._GammaAmp.set_value(2.2)
        self._GammaLayer.set_value(1)
        self._VelMult.set_value(1)
        self._MixLayers.set_value(0)
        
        
    def load_json_control_vals(self):
        try:
            path = os.path.join(self._SamplerPath.get_value(), "defaults.js")
            defaults = json.load(open(path, 'rb'))
            for ctrl in self.controls:
                ctrl.apply_defaults(defaults)
        except Exception, ex:
            print("Exception loading json file:", ex)

        
    def on_browse_playfile(self, *args, **kwargs):
        path = tkFileDialog.askopenfilename(
            filetypes=(("Audio files", ".flac", ".wav"),))
        if len(path) > 0:
            self._PlayFile.set_value(path)
            self._PlayFile.send_command()
            
    def send_command(self, cmd):
        try:
            self.proc.stdin.write(cmd + "\n")
        except Exception, ex:
            print("Failed to send command:", self.get_command())
            print(ex)  
            
    
if __name__ == "__main__":
    root = tk.Tk()
    gui = GUI(root)
    root.mainloop()
